// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAllRecentActivitiesData, GetAllRecentActivitiesResponse, GetCountersData, GetCountersResponse, GetPendingData, GetPendingResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class TheDashboardResource {
    public static getAllRecentActivities<ThrowOnError extends boolean = true>(options?: Options<GetAllRecentActivitiesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAllRecentActivitiesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/api/the-dashboard/dashboard/get-all-recent-activities',
            ...options
        });
    }
    
    public static getCounters<ThrowOnError extends boolean = true>(options?: Options<GetCountersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCountersResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/api/the-dashboard/dashboard/get-counters',
            ...options
        });
    }
    
    public static getPending<ThrowOnError extends boolean = true>(options?: Options<GetPendingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPendingResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/api/the-dashboard/dashboard/get-pending',
            ...options
        });
    }
    
}